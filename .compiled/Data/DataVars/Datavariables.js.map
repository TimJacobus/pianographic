{"version":3,"sources":["../../../src/Data/DataVars/Datavariables.js"],"names":["timeToMinutes","timeArray","index","totalTimePerMonth","Object","values","timeByMonth","map","x","totalTime","minutesPractised","slice","parseInt","reduce","a","b","hoursInYear","Math","floor","restMinutesInYear","module","exports"],"mappings":";;AAEA;;AAEA;;AAEA;AACA,IAAMA,gBAAgB,SAAhBA,aAAgB,CAACC,SAAD,EAAYC,KAAZ,EAAsB,CAE3C,CAFD;;AAKA;;AAEA;AAdA;;AAeA,IAAMC,oBAAoBC,OAAOC,MAAP,CAAcC,iBAAd,EACvBC,GADuB,CACnB;AAAA,SAAKC,EAAE,CAAF,EAAKC,SAAV;AAAA,CADmB,CAA1B;;AAGA;AACA,IAAMC,mBAAmBP,kBAAkBI,GAAlB,CAAsB;AAAA,SAAKC,EAAEG,KAAF,CAAQ,CAAR,EAAU,CAAV,CAAL;AAAA,CAAtB,EACtBJ,GADsB,CAClB;AAAA,SAAKK,SAASJ,CAAT,EAAY,EAAZ,CAAL;AAAA,CADkB,EAEtBK,MAFsB,CAEf,UAACC,CAAD,EAAIC,CAAJ;AAAA,SAAUD,IAAIC,CAAd;AAAA,CAFe,IAEI,EAFJ,GAGvBZ,kBAAkBI,GAAlB,CAAsB;AAAA,SAAKC,EAAEG,KAAF,CAAQ,CAAR,EAAU,CAAV,CAAL;AAAA,CAAtB,EACCJ,GADD,CACK;AAAA,SAAKK,SAASJ,CAAT,EAAY,EAAZ,CAAL;AAAA,CADL,EAECK,MAFD,CAEQ,UAACC,CAAD,EAAIC,CAAJ;AAAA,SAAUD,IAAIC,CAAd;AAAA,CAFR,CAHF;;AAOA;AACA,IAAMC,cAAcC,KAAKC,KAAL,CAAWR,mBAAiB,EAA5B,CAApB;AACA,IAAMS,oBAAoBT,mBAAmBM,cAAY,EAAzD;;AAIAI,OAAOC,OAAP,GAAiB;AACflB,qBAAmBA,iBADJ;AAEfO,oBAAkBA,gBAFH;AAGfM,eAAaA,WAHE;AAIfG,qBAAmBA;AAJJ,CAAjB","file":"Datavariables.js","sourcesContent":["//This file will hold all the variables which are created from the objects in data.js. These variables will be used to create data which I can display.\r\n\r\nimport { timeByMonth, dailyInput, music, repertoire, timeByDay } from '../DataTxt/Data';\r\n\r\n//    CALCULATION FUNCTIONS\r\n\r\n//  timeToMinutes converts a time value of hh:mm:ss to minutes. It takes two arguments: an array and the index at which each time value is stored at each entry.\r\nconst timeToMinutes = (timeArray, index) => {\r\n\r\n}\r\n\r\n\r\n//    TIMEBYMONTH VARIABLES\r\n\r\n// totalTimePerMonth holds an array with the total time practised in each month, which is used to calculate the total time over the entire year.\r\nconst totalTimePerMonth = Object.values(timeByMonth)\r\n  .map(x => x[0].totalTime);\r\n\r\n// minutesPractised holds the amount of minutes I've spent practising in 2018. This will be used for many other calculations.\r\nconst minutesPractised = totalTimePerMonth.map(x => x.slice(0,2))\r\n  .map(x => parseInt(x, 10))\r\n  .reduce((a, b) => a + b) * 60 +\r\n  totalTimePerMonth.map(x => x.slice(3,5))\r\n  .map(x => parseInt(x, 10))\r\n  .reduce((a, b) => a + b);\r\n\r\n//Two quick variables which translate the total amount of minutes into hours and rest minutes. These then can be used to un-function my functions. Marvelous.\r\nconst hoursInYear = Math.floor(minutesPractised/60);\r\nconst restMinutesInYear = minutesPractised - hoursInYear*60;\r\n\r\n\r\n\r\nmodule.exports = {\r\n  totalTimePerMonth: totalTimePerMonth,\r\n  minutesPractised: minutesPractised,\r\n  hoursInYear: hoursInYear,\r\n  restMinutesInYear: restMinutesInYear\r\n};\r\n"]}