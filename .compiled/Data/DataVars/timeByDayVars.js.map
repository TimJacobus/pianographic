{"version":3,"sources":["../../../src/Data/DataVars/TimeByDayVars.js"],"names":["timeConverter","input","index","map","entry","split","parseInt","averagePerDay","totalMinutes","reduce","a","b","Math","round","length","minutesToTimeConverter","data","hours","minutes","timePerMonth","dateObj","dateKeys","Object","keys","returnObj","month","timeByDayMinutes","slice","i","monthArr","filter","averagePerMonth","totalTimePerMonth","dailyPracMonth","monthObj","howMuchPracc","time","dataKeys","hoursPractisedPerDay","count","howMuchPraccMonth","timeByDay","dailyAverage","averageTimePerMonth","console","log","daysWith0Prac","daysWith1Prac","daysWith2Prac","daysWith3Prac","daysWith4Prac","daysWith5Prac","months0Prac","months1Prac","months2Prac","months3Prac","months4Prac","months5Prac"],"mappings":"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","file":"TimeByDayVars.js","sourcesContent":["import { timeByDay } from '../DataTxt/Data';\n\n\n//    FUNCTIONS\n\n//  A quick function convert all the time values to minutes, which is what we'll work with for the remainder of the app. I could've used a for loop to avoid the entry[0] repetition. Don't know what would've been better.\n//  If I were to use a for loop, I could make it much more multi-functional. Perhaps by spreading each entry [...entry] and calling a slice on that, using the index to replace the correct array entry.\n\nconst timeConverter = (input, index) => {\n   return input.map(entry => [entry[0], entry[index].split(':')])\n    .map(entry => [entry[0], entry[index].map(index => parseInt(index, 10))])\n    .map(entry => [entry[0], entry[1][0]*60, entry[1][1]])\n    .map(entry => [entry[0], entry[1]+entry[2]]);\n}\n\n//  Calculates the daily average.\n\nconst averagePerDay = (input, index) => {\n  const totalMinutes =  input.map(entry => entry[index]).reduce((a,b) => a + b);\n  return Math.round(totalMinutes / input.length);\n}\n\n//  This function converts minutes to hh:mm:ss, with ss always being 00. Use this throughout to quickly convert back for display purposes.\n\nexport const minutesToTimeConverter = (data) => {\n  let totalMinutes = data;\n  let hours = 0;\n  let minutes = 0;\n  while (totalMinutes > 0) {\n    if (totalMinutes >= 60) {\n      hours++;\n      totalMinutes = totalMinutes - 60;\n    }\n    if (totalMinutes < 60) {\n      minutes++;\n      totalMinutes--;\n    }\n  }\n  return `${hours} hours and ${minutes} minutes`\n}\n\n//  This function returns an object with keys (months) and values (time spent per month).\n\nconst timePerMonth = () => {\n  const dateObj = {\n    1: 'January', 2: 'February', 3: 'March', 4: 'April', 5: 'May', 6: 'June', 7: 'July', 8: 'August', 9: 'September', 10: 'October', 11: 'November', 12: 'December'\n  }\n  const dateKeys = Object.keys(dateObj).map(entry => parseInt(entry));\n  const returnObj = {};\n\n  const month = timeByDayMinutes.map(entry => \n    [parseInt(entry[0].split('/').slice(1, 2)),\n    entry[1]]);\n  \n  for (let i = 0; i < dateKeys.length; i++) {\n    const monthArr = month.filter(entry => entry[0] === i+1).map(entry => entry[1]);\n    returnObj[dateObj[i+1]] = monthArr.reduce((a, b) => a + b);\n  }\n  return returnObj;\n}\n\n//  This function returns an object with keys (months) and values (average time spent per month).\n\nconst averagePerMonth = () => {\n  const returnObj = {};\n  const dateKeys = Object.keys(totalTimePerMonth);\n\n  const month = timeByDayMinutes.map(entry => \n    [parseInt(entry[0].split('/').slice(1, 2)),\n    entry[1]]);\n\n  for (let i = 0; i < dateKeys.length; i++) {\n    const monthArr = month.filter(entry => entry[0] === i+1).map(entry => entry[1]);\n\n    returnObj[dateKeys[i]] = Math.round(totalTimePerMonth[dateKeys[i]]/monthArr.length);\n  }\n  return returnObj;\n}\n\n\n//  This function creates an object. It has keys (months) and values (objects). Each object value has keys (hours practised) and values (number of days that amount of time was practised).\n//  0 means no practice, 1 means between 1 and 60 minutes, 2 means between 61 and 120, etc.\nconst dailyPracMonth = () => {\n  const dateObj = {\n    1: 'January', 2: 'February', 3: 'March', 4: 'April', 5: 'May', 6: 'June', 7: 'July', 8: 'August', 9: 'September', 10: 'October', 11: 'November', 12: 'December'\n  }\n  const dateKeys = Object.keys(dateObj).map(entry => parseInt(entry));\n  const returnObj = {};\n\n  const month = timeByDayMinutes.map(entry => \n    [parseInt(entry[0].split('/').slice(1, 2)),\n    entry[1]]);\n\n  for (let i = 0; i < dateKeys.length; i++) {\n    const monthObj = {\n      0: month.filter(entry => entry[0] === dateKeys[i] && entry[1] === 0).length,\n      1: month.filter(entry => entry[0] === dateKeys[i] && (entry[1] > 0 && entry[1] <= 60)).length,\n      2: month.filter(entry => entry[0] === dateKeys[i] && (entry[1] > 60 && entry[1] <= 120)).length,\n      3: month.filter(entry => entry[0] === dateKeys[i] && (entry[1] > 120 && entry[1] <= 180)).length,\n      4: month.filter(entry => entry[0] === dateKeys[i] && (entry[1] > 180 && entry[1] <= 240)).length,\n      5: month.filter(entry => entry[0] === dateKeys[i] && (entry[1] > 240 && entry[1] <= 300)).length\n    }\n    returnObj[dateObj[i+1]] = monthObj;\n  }\n  return returnObj;\n}\n\n//  This function adds up all the days on which you practised a certain amount of time.\nconst howMuchPracc = (time) => {\n  const dataKeys = Object.keys(hoursPractisedPerDay);\n  let count = 0;\n\n  for (let i = 0; i < dataKeys.length; i++) {\n    count = count + hoursPractisedPerDay[dataKeys[i]][time];\n  }\n  return count;\n}\n\n//  This function creates an object with keys (months) and values (the amount of days spent practising the input value).\nconst howMuchPraccMonth = (time) => {\n  const dataKeys = Object.keys(hoursPractisedPerDay);\n  const returnObj = {};\n\n  for (let i = 0; i < dataKeys.length; i++) {\n    returnObj[dataKeys[i]] = hoursPractisedPerDay[dataKeys[i]][time]\n  }\n  return returnObj;\n}\n\n//    VARIABLES\n\n//  timeByDayMinutes converts timeByDay to an array with values in minutes at [1].\n//  dailyAverage displays the average amount of time practised per day.\nexport const timeByDayMinutes = timeConverter(timeByDay, 1);\nexport const dailyAverage = averagePerDay(timeByDayMinutes, 1);\n\nexport const totalTimePerMonth = timePerMonth();\nexport const averageTimePerMonth = averagePerMonth();\n\nexport const hoursPractisedPerDay = dailyPracMonth();\n\nconsole.log(hoursPractisedPerDay)\n\nexport const daysWith0Prac = howMuchPracc(0);\nexport const daysWith1Prac = howMuchPracc(1);\nexport const daysWith2Prac = howMuchPracc(2);\nexport const daysWith3Prac = howMuchPracc(3);\nexport const daysWith4Prac = howMuchPracc(4);\nexport const daysWith5Prac = howMuchPracc(5);\n\nexport const months0Prac = howMuchPraccMonth(0);\nexport const months1Prac = howMuchPraccMonth(1);\nexport const months2Prac = howMuchPraccMonth(2);\nexport const months3Prac = howMuchPraccMonth(3);\nexport const months4Prac = howMuchPraccMonth(4);\nexport const months5Prac = howMuchPraccMonth(5);"]}