{"version":3,"sources":["../../../src/Data/DataVars/MonthVars.js"],"names":["timeToMinutes","input","index","splitArr","map","entry","split","parseInt","hoursInMinutes","time","slice","restMinutes","reduce","a","b","totalMinutesInYear","timeByMonth","hoursInYear","Math","floor","restMinutesInYear","timeByMonthCopy"],"mappings":";;;;;;;AAAA;;;;AAEA;;AAEA;AACA;;AAEA;;AAEO,IAAMA,wCAAgB,SAAhBA,aAAgB,CAACC,KAAD,EAAQC,KAAR,EAAkB;AAC7C,MAAMC,WAAWF,MAAMG,GAAN,CAAU;AAAA,WAASC,MAAMH,KAAN,CAAT;AAAA,GAAV,EAChBE,GADgB,CACZ;AAAA,WAASC,MAAMC,KAAN,CAAY,GAAZ,CAAT;AAAA,GADY,EAEhBF,GAFgB,CAEZ;AAAA,WAASC,MAAMD,GAAN,CAAU;AAAA,aAASG,SAASL,KAAT,EAAgB,EAAhB,CAAT;AAAA,KAAV,CAAT;AAAA,GAFY,CAAjB;;AAIA,MAAMM,iBAAiBL,SAASC,GAAT,CAAa;AAAA,WAAQK,KAAKC,KAAL,CAAW,CAAX,EAAa,CAAb,CAAR;AAAA,GAAb,EACpBN,GADoB,CAChB;AAAA,WAASC,QAAQ,EAAjB;AAAA,GADgB,CAAvB;;AAGA,MAAMM,cAAcR,SAASC,GAAT,CAAa;AAAA,WAAQK,KAAKC,KAAL,CAAW,CAAX,EAAa,CAAb,CAAR;AAAA,GAAb,EACjBN,GADiB,CACb;AAAA,WAASC,QAAQ,CAAjB;AAAA,GADa,CAApB;;AAGA,SAAOG,eAAeI,MAAf,CAAsB,UAACC,CAAD,EAAIC,CAAJ;AAAA,WAAUD,IAAIC,CAAd;AAAA,GAAtB,IAAyCH,YAAYC,MAAZ,CAAmB,UAACC,CAAD,EAAIC,CAAJ;AAAA,WAAUD,IAAIC,CAAd;AAAA,GAAnB,CAAhD;AACD,CAZM;;AAeP;;AAEO,IAAMC,kDAAqBf,cAAcgB,iBAAd,EAA2B,CAA3B,CAA3B;AACA,IAAMC,oCAAcC,KAAKC,KAAL,CAAWJ,qBAAmB,EAA9B,CAApB;AACA,IAAMK,gDAAoBL,qBAAqBE,cAAY,EAA3D;AACA,IAAMI,yEAAsBL,iBAAtB,EAAN,C,CAA8C","file":"MonthVars.js","sourcesContent":["import { timeByMonth } from '../DataTxt/Data';\r\n\r\n//    FUNCTIONS\r\n\r\n//  The only purpose of timeToMinutes is to take an array of time values (h:mm:ss / hh:mm:ss / hhh:mm:ss) and converting it to a total amount of minutes. \r\n//  If you want to know the total amount of time spent on a specific thing, you first create a filtered array with the timeSpentOn method, and then you use timeToMinutes to convert it to minutes.\r\n\r\n//  NOTE: in the restMinutes constant, I map every entry to entry * 1. I do this because each entry sits in its own array, and I want to remove that inner array. There must be a better way of doing that.\r\n\r\nexport const timeToMinutes = (input, index) => {\r\n  const splitArr = input.map(entry => entry[index])\r\n  .map(entry => entry.split(':'))\r\n  .map(entry => entry.map(index => parseInt(index, 10)));\r\n  \r\n  const hoursInMinutes = splitArr.map(time => time.slice(0,1))\r\n    .map(entry => entry * 60);\r\n  \r\n  const restMinutes = splitArr.map(time => time.slice(1,2))\r\n    .map(entry => entry * 1);        \r\n \r\n  return hoursInMinutes.reduce((a, b) => a + b) + restMinutes.reduce((a, b) => a + b);\r\n};\r\n\r\n\r\n//    VARIABLES\r\n\r\nexport const totalMinutesInYear = timeToMinutes(timeByMonth, 1);\r\nexport const hoursInYear = Math.floor(totalMinutesInYear/60);\r\nexport const restMinutesInYear = totalMinutesInYear - hoursInYear*60;\r\nexport const timeByMonthCopy = [...timeByMonth];     //This array can be used to make a graph or something, probably.\r\n\r\n"]}